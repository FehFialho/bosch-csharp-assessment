// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InkFlow.Migrations
{
    [DbContext(typeof(InkFlowDbContext))]
    partial class InkFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ThePixeler.Models.History", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WriterID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HistoryID");

                    b.HasIndex("WriterID");

                    b.ToTable("histories");
                });

            modelBuilder.Entity("ThePixeler.Models.HistoryList", b =>
                {
                    b.Property<int>("HistoryListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryListID"));

                    b.Property<int>("HistoryID")
                        .HasColumnType("int");

                    b.Property<int>("ReadListID")
                        .HasColumnType("int");

                    b.HasKey("HistoryListID");

                    b.HasIndex("HistoryID");

                    b.HasIndex("ReadListID");

                    b.ToTable("historyLists");
                });

            modelBuilder.Entity("ThePixeler.Models.ReadList", b =>
                {
                    b.Property<int>("ReadListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReadListID"));

                    b.Property<Guid>("AuthorUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReadListID");

                    b.HasIndex("AuthorUserID");

                    b.ToTable("readLists");
                });

            modelBuilder.Entity("ThePixeler.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AccountCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ThePixeler.Models.History", b =>
                {
                    b.HasOne("ThePixeler.Models.User", "Writer")
                        .WithMany("Histories")
                        .HasForeignKey("WriterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("ThePixeler.Models.HistoryList", b =>
                {
                    b.HasOne("ThePixeler.Models.History", "History")
                        .WithMany("HistoryLists")
                        .HasForeignKey("HistoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThePixeler.Models.ReadList", "ReadList")
                        .WithMany("HistoryLists")
                        .HasForeignKey("ReadListID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("ReadList");
                });

            modelBuilder.Entity("ThePixeler.Models.ReadList", b =>
                {
                    b.HasOne("ThePixeler.Models.User", "Author")
                        .WithMany("ReadLists")
                        .HasForeignKey("AuthorUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ThePixeler.Models.History", b =>
                {
                    b.Navigation("HistoryLists");
                });

            modelBuilder.Entity("ThePixeler.Models.ReadList", b =>
                {
                    b.Navigation("HistoryLists");
                });

            modelBuilder.Entity("ThePixeler.Models.User", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("ReadLists");
                });
#pragma warning restore 612, 618
        }
    }
}
